{"version":3,"file":"static/js/52.fba659d7.chunk.js","mappings":"uOAKaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IAgBpC,OACE,UAAC,KAAD,CACEC,KAAK,QACLC,GAAG,OACHC,GAAI,GACJC,WAAY,CACV,oCACA,mCACA,oCAEFC,OAAQ,IACRC,aAAa,MACbC,UAAU,UACVC,EAAE,IACFC,QAAQ,KAbV,UAeGZ,IAAc,0CACf,mCACA,kBACEa,SAjCc,SAAAC,GAClBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cAEjBnB,GACEoB,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAIrCL,EAAKO,OACN,EAsBKC,MAAO,CACLC,QAAS,OACTC,cAAe,SAEfC,QAAS,IANb,WASE,mBACEH,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUE,UAAW,IADhE,mBAIE,SAAC,EAAAC,EAAD,CACEC,KAAK,OACLC,KAAK,QACLC,YAAY,eACZC,QAAQ,wBAGZ,mBACET,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUE,UAAW,IADhE,sBAIE,SAAC,EAAAC,EAAD,CACEC,KAAK,WACLC,KAAK,WACLC,YAAY,eACZC,QAAQ,wBAIZ,SAAC,KAAD,CACEC,GAAG,SACHJ,KAAK,SACLK,MAAM,QACNC,WAAW,OACX3B,aAAa,KACbF,WAAW,uCACX8B,EAAE,QACFC,EAAE,OACFC,OAAQ,CACNhC,WAAY,qCAEdF,GAAG,OACHC,GAAI,EAbN,uBAoBP,ECvFD,EAJc,WACZ,OAAO,SAACT,EAAD,GACR,C,6QCUD,GAAwD2C,EAAAA,EAAAA,GAAc,CACpEC,KAAI,2BACJC,aAAY,kHAFd,eAAKC,EAAL,KAAgCC,EAAhC,KAIA,GAAmDJ,EAAAA,EAAAA,GAAc,CAC/DK,QAAQ,EACRJ,KAAM,uBAFR,eAAKK,EAAL,KAA0BC,EAA1B,KA8GA,IAAIC,GAAcC,EAAAA,EAAAA,IAChB,SAAsBC,EAAOC,GAC3B,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,OAAQH,GAE3C,EA9GJ,SAAgCA,GAC9B,IACMI,EAMFJ,EANFK,GACAC,EAKEN,EALFM,WACAC,EAIEP,EAJFO,UACAC,EAGER,EAHFQ,WACAC,EAEET,EAFFS,WACGC,GANL,OAOIV,EAPJ,GAQMW,GAAOC,EAAAA,EAAAA,SACPP,EAAKD,GAAM,gBAAaO,GACxBE,EAAO,UAAMR,EAAN,UACPS,EAAU,UAAMT,EAAN,aACVU,EAAU,UAAMV,EAAN,aAChB,GAA8CW,EAAAA,EAAAA,WAAS,GAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAkBC,EAAlB,KACMC,GAAmBC,EAAAA,EAAAA,cACvB,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAA6B,KAA7B,uBACErB,GAAIU,GACDU,GAFL,IAOExB,KAAK0B,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GAELR,GAAe,EAChB,KAXH,GAaA,CAACL,IAEGc,GAAgBL,EAAAA,EAAAA,cACpB,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAA6B,KAA7B,yBACKD,GADL,IAEExB,IAAKyB,EACL,cAAcI,EAAAA,EAAAA,IAAST,GACvB,iBAAiBS,EAAAA,EAAAA,IAAStB,GAC1B,gBAAgBsB,EAAAA,EAAAA,IAASvB,GACzB,iBAAiBuB,EAAAA,EAAAA,IAASrB,GAC1BJ,QAAkB,IAAdoB,EAAOpB,GAAgBoB,EAAOpB,GAAKQ,EACvCkB,aAA4B,IAAnBN,EAAOM,QAAqBN,EAAOM,QAAU1B,GARxD,GAUA,CAACA,EAAIG,EAAYa,EAAWd,EAAWE,EAAYI,IAE/CmB,GAAuBR,EAAAA,EAAAA,cAC3B,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAA6B,KAA7B,uBACErB,GAAIS,GACDW,GAFL,IAOExB,KAAK0B,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GAELV,GAAmB,EACpB,IACD,YAAa,UAZf,GAcA,CAACJ,IAEGmB,GAAeT,EAAAA,EAAAA,cACnB,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAA6B,KAA7B,iCACKD,GACAf,GAFL,IAGET,IAAKyB,EACLQ,KAAM,SAJR,GAMA,CAACxB,IAEGyB,GAA4BX,EAAAA,EAAAA,cAChC,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAA6B,KAA7B,yBACKD,GADL,IAEExB,IAAKyB,EACLQ,KAAM,eACN,eAAe,EACfE,SAAUX,EAAOW,UAAY,KAL/B,GAOA,IAEF,MAAO,CACL9B,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACda,YAAaA,EACbgB,QAAS,kBAAMf,GAAS,EAAf,EACTgB,OAAQ,kBAAMhB,GAAS,EAAf,EACRL,gBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAf,GAAAA,EACAQ,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAa,iBAAAA,EACAS,qBAAAA,EACAC,aAAAA,EACAJ,cAAAA,EACAM,0BAAAA,EAEH,CASOI,EALaC,EAAAA,EAAAA,IAAiBxC,IAEhCiC,EADF,EACEA,aAEGQ,GAHL,EAEE/B,WAFF,aAKMgC,GAAYC,EAAAA,EAAAA,IAAG,sBAAuB3C,EAAM0C,WAChD,OAAqB7D,EAAAA,EAAAA,KAAIe,EAAqB,CAAEgD,MAAOH,EAASL,UAA0BvD,EAAAA,EAAAA,KAAIY,EAA2B,CAAEmD,MAAO1C,EAAQkC,UAA0BvD,EAAAA,EAAAA,KACpKgE,EAAAA,EAAAA,KADuK,kBAGlKZ,EAAa,GAAIhC,IAHiJ,IAIrKyC,UAAAA,EACAI,MAAO5C,EAAM,gBAGlB,IAEHJ,EAAYiD,YAAc,eACLhD,EAAAA,EAAAA,IACnB,SAAyBC,EAAOC,GAC5B,IAAI,EAAQJ,IACRK,EAASR,IACTgD,GAAYC,EAAAA,EAAAA,IAAG,2BAA4B3C,EAAM0C,WACrD,OAAqB7D,EAAAA,EAAAA,KACrBgE,EAAAA,EAAAA,KADwB,kBAGV,MAAT,OAAgB,EAAS,EAAMtB,iBAAiBvB,EAAOC,IAHpC,IAItB6C,MAAO5C,EAAO,WACdwC,UAAAA,IAGL,IAEYK,YAAc,iB,2KC7J7B,SAASR,EAAeS,GACtB,MAWF,SAA6BA,GAC3B,IAAIpD,EAAIQ,EAAI+B,EACNC,EAAQa,IAEZC,EAWEF,EAXFE,GACAC,EAUEH,EAVFG,SACAC,EASEJ,EATFI,SACAN,EAQEE,EARFF,SACAO,EAOEL,EAPFK,WACA7C,EAMEwC,EANFxC,UACAH,EAKE2C,EALF3C,WACAC,EAIE0C,EAJF1C,WACAS,EAGEiC,EAHFjC,QACAuC,EAEEN,EAFFM,OACGC,GAXL,OAYIP,EAZJ,GAaMnC,EAAWmC,EAAM,oBAAsB,CAACA,EAAM,qBAAuB,IAC7D,MAATZ,OAAgB,EAASA,EAAMlB,mBAA8B,MAATkB,OAAgB,EAASA,EAAM5B,YACtFK,EAASC,KAAKsB,EAAMoB,aAET,MAATpB,OAAgB,EAASA,EAAMqB,cACjC5C,EAASC,KAAKsB,EAAMsB,YAEtB,yBACKH,GADL,IAEE,mBAAoB1C,EAAS8C,KAAK,WAAQ,EAC1CT,GAAU,MAANA,EAAaA,EAAc,MAATd,OAAgB,EAASA,EAAMc,GACrD5C,WAA+D,OAAlDV,EAAiB,MAAZuD,EAAmBA,EAAW7C,GAAsBV,EAAc,MAATwC,OAAgB,EAASA,EAAM9B,WAC1GD,WAA+D,OAAlDD,EAAiB,MAAZgD,EAAmBA,EAAW/C,GAAsBD,EAAc,MAATgC,OAAgB,EAASA,EAAM/B,WAC1GgD,WAA+D,OAAlDlB,EAAiB,MAAZW,EAAmBA,EAAWO,GAAsBlB,EAAc,MAATC,OAAgB,EAASA,EAAMiB,WAC1G7C,UAAwB,MAAbA,EAAoBA,EAAqB,MAAT4B,OAAgB,EAASA,EAAM5B,UAC1EO,SAAS6C,EAAAA,EAAAA,IAAyB,MAATxB,OAAgB,EAASA,EAAMrB,QAASA,GACjEuC,QAAQM,EAAAA,EAAAA,IAAyB,MAATxB,OAAgB,EAASA,EAAMkB,OAAQA,IAElE,CA7CoE/C,CAAoByC,GAA/E1C,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,UAAWH,EAA/B,EAA+BA,WAAYgD,EAA3C,EAA2CA,WAAeE,GAA1D,YACA,yBACKA,GADL,IAEEJ,SAAU7C,EACV8C,SAAU/C,EACVyC,SAAUO,EACV,gBAAgBQ,EAAAA,EAAAA,IAASrD,GACzB,iBAAiBqD,EAAAA,EAAAA,IAASR,GAC1B,iBAAiBQ,EAAAA,EAAAA,IAASxD,IAE7B,C,mBCNGkC,GAAQxC,EAAAA,EAAAA,IAAW,SAAgB+D,EAAOT,GAC5C,IAAQf,EAAsBwB,EAAtBxB,SAAaxC,GAArB,OAA8BgE,EAA9B,GACMC,GAAS5D,EAAAA,EAAAA,IAAoB,QAASL,GAEtCkE,EAAQJ,GADGpB,EAAAA,EAAAA,IAAiB1C,IAE5BmE,GAAatB,EAAAA,EAAAA,IAAG,eAAgBmB,EAAMpB,WAC5C,OAAuBwB,EAAAA,EAAAA,KACrBrB,EAAAA,EAAAA,OADwB,gBAGtBC,KAAMR,GACH0B,GAJmB,IAKtBpB,MAAOmB,EAAO3D,MACdiD,IAAAA,EACAX,UAAWuB,IAGhB,IACD1B,EAAM,YAAc,QACpBA,EAAM,GAAK,O","sources":["components/Form/authForms/LoginForm.jsx","pages/LoginPage/Login.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@chakra-ui/react';\nimport { logIn } from 'redux/auth/operations';\nimport { Input } from '@chakra-ui/react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const errorLogin = useSelector(state => state.error);\n\n  const handleLogin = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <Box\n      maxW=\"500px\"\n      mx=\"auto\"\n      mt={24}\n      bgGradient={[\n        'linear(to-tr, gray.400, gray.200)',\n        'linear(to-t, gray.200, gray.100)',\n        'linear(to-b, gray.100, gray.300)',\n      ]}\n      height={350}\n      borderRadius=\"5px\"\n      boxShadow=\"dark-lg\"\n      p=\"6\"\n      rounded=\"md\"\n    >\n      {errorLogin && <div>Error login</div>}\n      <h1>Login</h1>\n      <form\n        onSubmit={handleLogin}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n\n          padding: 15,\n        }}\n      >\n        <label\n          style={{ display: 'flex', flexDirection: 'column', marginTop: 10 }}\n        >\n          Email\n          <Input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Phone number\"\n            outline=\"1px solid green\"\n          />\n        </label>\n        <label\n          style={{ display: 'flex', flexDirection: 'column', marginTop: 10 }}\n        >\n          Password\n          <Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Phone number\"\n            outline=\"1px solid green\"\n          />\n        </label>\n\n        <Box\n          as=\"button\"\n          type=\"submit\"\n          color=\"white\"\n          fontWeight=\"bold\"\n          borderRadius=\"md\"\n          bgGradient=\"linear(to-r, yellow.500, purple.500)\"\n          w=\"300px\"\n          h=\"50px\"\n          _hover={{\n            bgGradient: 'linear(to-r, red.500, yellow.500)',\n          }}\n          mx=\"60px\"\n          mt={3}\n        >\n          Send\n        </Box>\n      </form>\n    </Box>\n  );\n};","import { LoginForm } from 'components/Form/authForms/LoginForm';\n\nconst Login = () => {\n  return <LoginForm />;\n};\n\nexport default Login;","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["LoginForm","dispatch","useDispatch","errorLogin","useSelector","state","error","maxW","mx","mt","bgGradient","height","borderRadius","boxShadow","p","rounded","onSubmit","evt","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","style","display","flexDirection","padding","marginTop","I","type","name","placeholder","outline","as","color","fontWeight","w","h","_hover","createContext","errorMessage","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","forwardRef","idProp","getLabelProps","context","useMultiStyleConfig","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","useState","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","ref","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","props","omitThemingProps","div","__css","cx","displayName","chakra","field","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","required","rest","push","disabled","join","_a","_b","_c","useFormControl","callAllHandlers","htmlSize","input","className","size","Input"],"sourceRoot":""}