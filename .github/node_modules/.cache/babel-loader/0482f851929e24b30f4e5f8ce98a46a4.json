{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Projects\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\App.jsx\";\nimport { Component } from 'react';\nimport Form from './Form';\nimport { nanoid } from 'nanoid';\nimport Contacts from './Contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts: [],\n      filter: ''\n    };\n\n    this.addContact = contact => {\n      const isInContacts = this.state.contacts.some(_ref => {\n        let {\n          name\n        } = _ref;\n        return name.toLowerCase() === contact.name.toLowerCase();\n      });\n\n      if (isInContacts) {\n        alert(`${contact.name} is already in contacts`);\n        return;\n      }\n\n      this.setState(prevState => ({\n        contacts: [{\n          id: nanoid(),\n          ...contact\n        }, ...prevState.contacts]\n      }));\n    };\n\n    this.changeFilter = event => {\n      this.setState({\n        filter: event.target.value\n      });\n    };\n\n    this.getVisibleContacts = () => {\n      const {\n        filter,\n        contacts\n      } = this.state;\n      const normalizedFilter = filter.toLowerCase();\n      return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    };\n\n    this.removeContact = contactId => {\n      this.setState(prevState => {\n        return {\n          contacts: prevState.contacts.filter(_ref2 => {\n            let {\n              id\n            } = _ref2;\n            return id !== contactId;\n          })\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Рабочий стол/Projects/goit-react-hw-02-phonebook/src/components/App.jsx"],"names":["Component","Form","nanoid","Contacts","App","state","contacts","filter","addContact","contact","isInContacts","some","name","toLowerCase","alert","setState","prevState","id","changeFilter","event","target","value","getVisibleContacts","normalizedFilter","includes","removeContact","contactId","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,OAAO,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCK,KADiC,GACzB;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,MAAM,EAAE;AAFF,KADyB;;AAAA,SAMjCC,UANiC,GAMpBC,OAAO,IAAI;AACtB,YAAMC,YAAY,GAAG,KAAKL,KAAL,CAAWC,QAAX,CAAoBK,IAApB,CACnB;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAcA,IAAI,CAACC,WAAL,OAAuBJ,OAAO,CAACG,IAAR,CAAaC,WAAb,EAArC;AAAA,OADmB,CAArB;;AAIA,UAAIH,YAAJ,EAAkB;AAChBI,QAAAA,KAAK,CAAE,GAAEL,OAAO,CAACG,IAAK,yBAAjB,CAAL;AACA;AACD;;AACD,WAAKG,QAAL,CAAcC,SAAS,KAAK;AAC1BV,QAAAA,QAAQ,EAAE,CAAC;AAAEW,UAAAA,EAAE,EAAEf,MAAM,EAAZ;AAAgB,aAAGO;AAAnB,SAAD,EAA+B,GAAGO,SAAS,CAACV,QAA5C;AADgB,OAAL,CAAvB;AAGD,KAlBgC;;AAAA,SAqBjCY,YArBiC,GAqBlBC,KAAK,IAAI;AACtB,WAAKJ,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAEY,KAAK,CAACC,MAAN,CAAaC;AAAvB,OAAd;AACD,KAvBgC;;AAAA,SA0BjCC,kBA1BiC,GA0BZ,MAAM;AACzB,YAAM;AAAEf,QAAAA,MAAF;AAAUD,QAAAA;AAAV,UAAuB,KAAKD,KAAlC;AACA,YAAMkB,gBAAgB,GAAGhB,MAAM,CAACM,WAAP,EAAzB;AAEA,aAAOP,QAAQ,CAACC,MAAT,CAAgBE,OAAO,IAC5BA,OAAO,CAACG,IAAR,CAAaC,WAAb,GAA2BW,QAA3B,CAAoCD,gBAApC,CADK,CAAP;AAGD,KAjCgC;;AAAA,SAmCjCE,aAnCiC,GAmCjBC,SAAS,IAAI;AAC3B,WAAKX,QAAL,CAAcC,SAAS,IAAI;AACzB,eAAO;AACLV,UAAAA,QAAQ,EAAEU,SAAS,CAACV,QAAV,CAAmBC,MAAnB,CAA0B;AAAA,gBAAC;AAAEU,cAAAA;AAAF,aAAD;AAAA,mBAAYA,EAAE,KAAKS,SAAnB;AAAA,WAA1B;AADL,SAAP;AAGD,OAJD;AAKD,KAzCgC;AAAA;;AA2CjCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAMD;;AAlDgC","sourcesContent":["import { Component } from 'react';\r\nimport Form from './Form';\r\nimport { nanoid } from 'nanoid';\r\nimport Contacts from './Contacts'\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  addContact = contact => {\r\n    const isInContacts = this.state.contacts.some(\r\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\r\n    );\r\n\r\n    if (isInContacts) {\r\n      alert(`${contact.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.setState(prevState => ({\r\n      contacts: [{ id: nanoid(), ...contact }, ...prevState.contacts],\r\n    }));\r\n  };\r\n\r\n\r\n  changeFilter = event => {\r\n    this.setState({ filter: event.target.value });\r\n  };\r\n\r\n\r\n  getVisibleContacts = () => {\r\n    const { filter, contacts } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n  removeContact = contactId => {\r\n    this.setState(prevState => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form />\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}